# The push secret fetches the randomly generated ceph s3 user credentials (a)  to vault
# The External Secret will fetch those credentials from vault and place them in the xraylab namespace
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: push-secret-ceph-s3-credentials
  namespace: openshift-storage
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  data:
    - conversionStrategy: None
      match:
        remoteRef:
          remoteKey: pushsecrets/ceph_s3_credentials
          property: username
        secretKey: AccessKey
    - conversionStrategy: None
      match:
        remoteRef:
          remoteKey: pushsecrets/ceph_s3_credentials
          property: password
        secretKey: SecretKey
  deletionPolicy: Delete
  refreshInterval: 10s
  secretStoreRefs:
    - kind: ClusterSecretStore
      name: vault-backend
  selector:
    secret:
      name: "rook-ceph-object-user-ocs-storagecluster-cephobjectstore-{{ .Values.objectStore.user.name }}"
  updatePolicy: Replace
---
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: ceph-s3-credentials-external-secret
  namespace: {{ .Values.global.xraylab.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: {{ .Values.secretStore.name }}
    kind: {{ .Values.secretStore.kind }}
  target:
    name: s3-secret-bck
    template:
      type: Opaque
      engineVersion: v2
      data:
        AWS_ACCESS_KEY_ID: "{{ `{{ .ceph_s3_accesskey }}` }}"
        AWS_SECRET_ACCESS_KEY: "{{ `{{ .ceph_s3_secretkey }}` }}"
  data:
  - secretKey: ceph_s3_accesskey
    remoteRef:
      key: "pushsecrets/ceph_s3_credentials"
      property: "username"

  - secretKey: ceph_s3_secretkey
    remoteRef:
      key: "pushsecrets/ceph_s3_credentials"
      property: "password"
